import logging
import os
import time

# –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Command, Text

# –∏–º–ø–æ—Ä—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –∏ –∫–ª–∞—Å—Å–æ–≤
from application.callback_datas import lang
from classes import AudioSave, LanguageClass
from config import Config
from markup import lang_keyboard, change_lang_keyboard, info

# –æ–±—å—è–≤–ª–µ–Ω–∏–µ –æ–±—å–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞ –ë–æ—Ç
bot = Bot(token=Config.TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)
# –≤–µ–¥–µ–Ω–∏–µ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
# –æ–±—å—è–≤–ª–µ–Ω–∏–µ –æ–±—å–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞ LanguageClass
language = LanguageClass()


# —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(Command(Config.list_start_commands))
async def welcome(message: types.Message):
    await bot.send_message(message.from_user.id,
                           "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {0.first_name}!\n"
                           "–Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –í–∞—à–∏–º–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏.".format(message.from_user),
                           reply_markup=info)
    await bot.send_message(message.from_user.id, "–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —É–∂–µ —Å–µ–π—á–∞—Å!\n"
                                                 "<i>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∑–∞–º–µ—Ç–∫–∏ üòâ</i>", reply_markup=lang_keyboard)


# –í—ã–∑–æ–≤ "—Ñ—É–Ω–∫—Ü–∏–∏" –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
@dp.message_handler(Text(equals="–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"))
async def call_another_keyboard(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", reply_markup=lang_keyboard)


# –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ-—Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(Text(equals="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
async def info_function(message: types.Message):
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø <i> OverNotes </i> –±–æ—Ç.\n–ú–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ —Ç–µ–∫—Å—Ç, "
                         f"–ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–∏–∫—Ç—É–π—Ç–µ –≤–∞—à—É –∑–∞–º–µ—Ç–∫—É –º–Ω–µ –≤ –≥–æ–ª–æ–≤–æ—Å–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–µ –∑–∞–±—ã–≤ –≤–Ω–∞—á–∞–ª–µ –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫.\n"
                         f"<b>–í–ù–ò–ú–ê–ù–ò–ï: –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –º–Ω–µ —Å–≤–æ–∏ –ø–∞—Ä–æ–ª–∏.</b>\n"
                         f"–î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–º–∞–Ω–¥ <i>start, —Å—Ç–∞—Ä—Ç, –ø–æ–µ—Ö–∞–ª–∏, go, –ø—É—Å–∫.</i>\n"
                         f"–î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π –ø–∏—à–∏—Ç–µ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é –Ω–∞ –ø–æ—á—Ç—É "
                         f"<b>petrolijuice@gmail.com</b>\n<i>PS: —è –Ω–∞—Ö–æ–∂—É—Å—å –≤ —Ä–∞–Ω–Ω–µ–π —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.</i>",
                         reply_markup=change_lang_keyboard)


# –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
@dp.callback_query_handler(lang.filter(language="ru-Ru"))
async def language_ru(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    language.set_language(call.from_user.id, "ru-Ru")
    await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>–†—É—Å—Å–∫–∏–π</b> —è–∑—ã–∫!", reply_markup=change_lang_keyboard)
    await message_delete(call.message, 0)


# –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
@dp.callback_query_handler(lang.filter(language="en-En"))
async def language_en(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    language.set_language(call.from_user.id, "en-En")
    await call.message.answer(f"You choice <b>English</b> language!", reply_markup=change_lang_keyboard)
    await message_delete(call.message, 0)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞
@dp.message_handler(content_types=[types.ContentType.VOICE])
async def get_voice(message: types.Message):
    file_info = await bot.get_file(message.voice.file_id)  # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–¥ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è
    if os.path.exists("files_voice"):
        pass
    else:
        os.mkdir("files_voice")
    filename = f"files_{file_info.file_path}"  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ –ø—É—Ç–∏
    await message.voice.download(filename)  # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –±–æ—Ç–æ–º
    # –æ–±—å—è–≤–ª–µ–Ω–∏–µ –æ–±—å–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞ AudioSave —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–º—è —Ñ–∞–π–ª–∞ –∏ —è–∑—ã–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫ –∏–¥
    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    voice_file = AudioSave(filename=filename, language=language.get_language(message.from_user.id))
    # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—à—å—é –º–µ—Ç–æ–¥–∞ convert_file –∫–ª–∞—Å—Å–∞ AudioSave
    voice_file.convert_file()
    # —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞  —Å –ø–æ–º–æ—à—å—é –º–µ—Ç–æ–¥–∞ recognize_file –∫–ª–∞—Å—Å–∞ AudioSave
    recognition_file = await voice_file.recognize_file()
    # –∑–∞–¥–∞–µ–º —É—Å–ª–æ–≤–∏–µ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if recognition_file != "<i>–Ø —Ç–µ–±—è –Ω–µ —Å–ª—ã—à—É!\nüôâ</i>":
        await bot.send_message(message.from_user.id, f"{recognition_file}", disable_notification=True)
        await voice_file.delete_file()
    # –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ (–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å): —É–¥–∞–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è)
    else:
        msg = await message.reply(f"<b>{recognition_file}</b>"
                                  f"\n<i>–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥</i>")
        await message_delete(msg, 5)
        await message_delete(message, 1)
        await voice_file.delete_file()


# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
async def message_delete(name: types.message.Message, secs: int):
    time.sleep(secs)
    await name.delete()
    return


# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    while True:  # –¶–∏–∫–ª –∑–∞–ø—É—Å–∫–∞/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Å–ª—É—á–∞–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
        try:
            executor.start_polling(dp, skip_updates=False)
        except Exception:
            print("Something went wrong, I go to restart myself")
            executor.start_polling(dp, skip_updates=False)
